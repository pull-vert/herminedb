import java.util.regex.Matcher
import java.util.regex.Pattern

allprojects {
    group 'org.hermine'
    version '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 10
    targetCompatibility = 10

    dependencies {
        compile('org.apache.logging.log4j:log4j-api:2.11.0')
        compile('org.apache.logging.log4j:log4j-core:2.11.0')

        testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
        testRuntimeOnly('org.apache.logging.log4j:log4j-jul:2.11.0')
    }

    test {
        useJUnitPlatform()

        systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
//        systemProperty 'log4j2.debug', ''

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }
    }
}

def noModule = ['hermine-jmh', 'hermine-playground']

configure(subprojects.findAll { !noModule.contains(it.name)  }) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.1'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    //    https://guides.gradle.org/building-java-9-modules/#step_2_produce_java_9_modules_for_all_subprojects
    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'org.junit.jupiter.api',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                def args = jvmArgs
                def modulePathIndex = args.indexOf('--module-path') + 1
                def ps = Pattern.quote(System.properties.'path.separator')
//                def jd = Pattern.quote(file("$buildDir/classes/java/main") as String)
                def jt = Pattern.quote(file("$buildDir/classes/java/test") as String)
//                def rd = Pattern.quote(file("$buildDir/resources/main") as String)
                def rt = Pattern.quote(file("$buildDir/resources/test") as String)
                args[modulePathIndex] = args[modulePathIndex]
//                        .replaceFirst(/(?:$ps|^)$rd/, '')
                        .replaceFirst(/(?:$ps|^)$rt/, '')
//                        .replaceFirst(/(?:$ps|^)$jd/, Matcher.quoteReplacement(temporaryDir as String))
                        .replaceFirst(/(?:$ps|^)$jt/, Matcher.quoteReplacement(temporaryDir as String))
                jvmArgs = args
                project.sync {
                    from compileJava
                    from processResources
                    into temporaryDir
                }
                classpath = files()
            }
        }
    }
}

wrapper {
    gradleVersion = '4.8'
    distributionType = Wrapper.DistributionType.ALL
}
