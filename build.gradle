/*
 * Copyright 2018 HermineDB's author : Frédéric Montariol. Use of this source code is governed by the Apache 2.0 license.
 */

import org.jetbrains.kotlin.config.KotlinCompilerVersion

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version")
        classpath("org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version")
    }
}

// Report Gradle version and Kotlin compiler version when building project
println("Using Gradle version: ${GradleVersion.current()}")
println("Using Kotlin compiler version: $KotlinCompilerVersion.VERSION")

subprojects {
    apply plugin: 'kotlin'

    repositories {
        jcenter()
    }

    sourceCompatibility = 1.9
    targetCompatibility = 1.9

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
        destinationDir = compileJava.destinationDir
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
        destinationDir = compileTestJava.destinationDir
    }

    kotlin.experimental.coroutines "enable"

    dependencies {
        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    }
}

def useKotlinxCoroutinesAndSlf4jAndJunit5 = ['hermine-io', 'herminedb-driver']

configure(subprojects.findAll { useKotlinxCoroutinesAndSlf4jAndJunit5.contains(it.name) }) {

    dependencies {
        compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinx_coroutines_version")
        compile("io.github.microutils:kotlin-logging:$kotlin_logging_version")

        testCompile("org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version")
        testCompile("org.assertj:assertj-core:$assertj_version")
        testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_version")
        testRuntimeOnly("org.apache.logging.log4j:log4j-jul:$log4j_version")
    }

    test {
        useJUnitPlatform()

        systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
//        systemProperty 'log4j2.debug', ''

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }
    }
}

def useAtomicFu = ['hermine-io']

configure(subprojects.findAll { useAtomicFu.contains(it.name) }) {
    apply plugin: 'kotlinx-atomicfu'

    dependencies {
        compileOnly "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
        testCompile "org.jetbrains.kotlinx:atomicfu:$atomicFU_version"
    }

    task copyModuleInfo(type: Copy) {
        from "$buildDir/classes/java/main"
        include 'module-info.class'
        into "$buildDir/classes-atomicfu/main"
    }

    copyModuleInfo.dependsOn compileKotlin

    task deleteModuleInfo(type: Delete) {
        delete file("$buildDir/classes/java/main/module-info.class")
    }

    deleteModuleInfo.dependsOn copyModuleInfo

    atomicFU {
        inputFiles = sourceSets.main.output.classesDirs
        outputDir = file("$buildDir/classes-atomicfu/main")
        classPath = sourceSets.main.runtimeClasspath
        variant = "VH" // "FU" for AtomicXXUpdater, "VH" to use Java 9 VarHandle
    }

    atomicFU.dependsOn deleteModuleInfo
    testClasses.dependsOn atomicFU
    jar.dependsOn atomicFU

    jar {
        mainSpec.sourcePaths.clear() // hack to clear existing paths
        from files(atomicFU.outputs, sourceSets.main.output.resourcesDir)
    }

    test {
        classpath = files(configurations.testRuntime, atomicFU.outputs, sourceSets.test.output.classesDirs,
                sourceSets.main.output.resourcesDir)
    }
}

def noModule = ['hermine-jmh', 'hermine-playground']

configure(subprojects.findAll { !noModule.contains(it.name) }) {
    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.1'
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    //    https://guides.gradle.org/building-java-9-modules/#step_2_produce_java_9_modules_for_all_subprojects
    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

//        compileTestJava {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                options.compilerArgs = [
//                        '--module-path', classpath.asPath,
//                        '--add-modules', 'org.junit.jupiter.api',
//                        '--add-reads', "$moduleName=org.junit.jupiter.api",
//                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
//                ]
//                classpath = files()
//            }
//        }

//        test {
//            inputs.property("moduleName", moduleName)
//            doFirst {
//                jvmArgs = [
//                        '--module-path', classpath.asPath,
//                        '--add-modules', 'ALL-MODULE-PATH',
//                        '--add-reads', "$moduleName=org.junit.jupiter.api,org.assertj.core",
//                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
//                ]
//                def args = jvmArgs
//                def modulePathIndex = args.indexOf('--module-path') + 1
//                def ps = Pattern.quote(System.properties.'path.separator')
////                def jd = Pattern.quote(file("$buildDir/classes/java/main") as String)
//                def jt = Pattern.quote(file("$buildDir/classes/java/test") as String)
////                def rd = Pattern.quote(file("$buildDir/resources/main") as String)
//                def rt = Pattern.quote(file("$buildDir/resources/test") as String)
//                args[modulePathIndex] = args[modulePathIndex]
////                        .replaceFirst(/(?:$ps|^)$rd/, '')
//                        .replaceFirst(/(?:$ps|^)$rt/, '')
////                        .replaceFirst(/(?:$ps|^)$jd/, Matcher.quoteReplacement(temporaryDir as String))
//                        .replaceFirst(/(?:$ps|^)$jt/, Matcher.quoteReplacement(temporaryDir as String))
//                jvmArgs = args
//                project.sync {
//                    from compileJava
//                    from compileKotlin
//                    from processResources
//                    into temporaryDir
//                }
//                classpath = files()
//            }
//        }
    }
}

// use ./gradlew wrapper when version change
wrapper {
    gradleVersion = '4.9'
    distributionType = Wrapper.DistributionType.ALL
}
